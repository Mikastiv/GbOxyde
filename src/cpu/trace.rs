use std::fmt::{Display, Formatter, Result};

use super::{Cpu, Interface};

impl Cpu {
    pub fn trace(&self, bus: &mut impl Interface) {
        let opcode = bus.peek(self.regs.pc);
        let inst = disassemble(opcode);
        self.print_inst(bus, inst);

        if let Instruction::PrefixCB = *inst {
            let opcode = bus.peek(self.regs.pc);
            let inst_cb = disassemble_cb(opcode);
            self.print_inst(bus, inst_cb);
        }
    }

    fn print_inst<I: Interface, Inst: Display>(&self, bus: &mut I, inst: Inst) {
        println!(
            "{} | {:02X} {:02X} {:02X} | PC:{:04X} | SP:{:04X} | A:{:02X} | F:{:02X} | B:{:02X} | C:{:02X} | D:{:02X} | E:{:02X} | H:{:02X} | L:{:02X} | CYCLES:{}",
            inst,
            bus.peek(self.regs.pc),
            bus.peek(self.regs.pc.wrapping_add(1)),
            bus.peek(self.regs.pc.wrapping_add(2)),
            self.regs.pc,
            self.regs.sp,
            self.regs.a,
            self.regs.f,
            self.regs.b,
            self.regs.c,
            self.regs.d,
            self.regs.e,
            self.regs.h,
            self.regs.l,
            bus.cycles(),
        );
    }
}

pub fn disassemble(opcode: u8) -> &'static Instruction {
    &INSTRUCTIONS[opcode as usize]
}

pub fn disassemble_cb(opcode: u8) -> &'static InstructionCB {
    &INSTRUCTIONS_CB[opcode as usize]
}

#[derive(Debug, Clone, Copy)]
pub enum Reg {
    A,
    B,
    C,
    D,
    E,
    H,
    L,
    AF,
    BC,
    DE,
    HL,
    SP,
}

impl Reg {
    fn get_cb_register_name(&self) -> String {
        match *self {
            Reg::HL => "(HL)".to_string(),
            r => r.to_string(),
        }
    }
}

impl Display for Reg {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        let r = match *self {
            Reg::A => "A",
            Reg::B => "B",
            Reg::C => "C",
            Reg::D => "D",
            Reg::E => "E",
            Reg::H => "F",
            Reg::L => "L",
            Reg::AF => "AF",
            Reg::BC => "BC",
            Reg::DE => "DE",
            Reg::HL => "HL",
            Reg::SP => "SP",
        };

        write!(f, "{}", r)
    }
}

#[derive(Debug, Clone, Copy)]
pub enum Cond {
    NZ,
    Z,
    NC,
    C,
}

impl Display for Cond {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        let c = match *self {
            Cond::NZ => "NZ",
            Cond::Z => "Z",
            Cond::NC => "NC",
            Cond::C => "C",
        };

        write!(f, "{}", c)
    }
}

pub enum Instruction {
    LdR8R8(Reg, Reg),
    LdR8D8(Reg),
    LdR8MemR16(Reg, Reg),
    LdMemR16R8(Reg, Reg),
    LdMemHLD8,
    LdAMemD16,
    LdMemD16A,
    LdAMemD8,
    LdMemD8A,
    LdAMemC,
    LdMemCA,
    LdiMemHLA,
    LdiAMemHL,
    LddMemHLA,
    LddAMemHL,
    LdR16D16(Reg),
    LdMemD16SP,
    LdSPHL,
    LdHLSPD8,
    PushR16(Reg),
    PopR16(Reg),
    AddR8(Reg),
    AddD8,
    AddMemHL,
    AddHLR16(Reg),
    AddSPD8,
    AdcR8(Reg),
    AdcD8,
    AdcMemHL,
    SubR8(Reg),
    SubD8,
    SubMemHL,
    SbcR8(Reg),
    SbcD8,
    SbcMemHL,
    AndR8(Reg),
    AndD8,
    AndMemHL,
    XorR8(Reg),
    XorD8,
    XorMemHL,
    OrR8(Reg),
    OrD8,
    OrMemHL,
    CpR8(Reg),
    CpD8,
    CpMemHL,
    IncR8(Reg),
    IncMemHL,
    IncR16(Reg),
    DecR8(Reg),
    DecMemHL,
    DecR16(Reg),
    Daa,
    Cpl,
    Rlca,
    Rla,
    Rrca,
    Rra,
    Ccf,
    Scf,
    Nop,
    Halt,
    Stop,
    Di,
    Ei,
    JpD16,
    JpHL,
    JpD16Cond(Cond),
    JrD8,
    JrD8Cond(Cond),
    CallD16,
    CallD16Cond(Cond),
    Ret,
    RetCond(Cond),
    Reti,
    Rst(u8),
    PrefixCB,
    Undefined(u8),
}

impl Display for Instruction {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        let s = match *self {
            Instruction::LdR8R8(r1, r2) => format!("ld {}, {}", r1, r2),
            Instruction::LdR8D8(r) => format!("ld {}, n", r),
            Instruction::LdR8MemR16(r1, r2) => format!("ld {}, ({})", r1, r2),
            Instruction::LdMemR16R8(r1, r2) => format!("ld ({}), {}", r1, r2),
            Instruction::LdMemHLD8 => "ld (HL), n".to_string(),
            Instruction::LdAMemD16 => "ld A, (nn)".to_string(),
            Instruction::LdMemD16A => "ld (nn), A".to_string(),
            Instruction::LdAMemD8 => "ld A, (FF00+n)".to_string(),
            Instruction::LdMemD8A => "ld (FF00+n), A".to_string(),
            Instruction::LdAMemC => "ld A, (FF00+C)".to_string(),
            Instruction::LdMemCA => "ld (FF00+C), A".to_string(),
            Instruction::LdiMemHLA => "ldi (HL), A".to_string(),
            Instruction::LdiAMemHL => "ldi A, (HL)".to_string(),
            Instruction::LddMemHLA => "ldd (HL), A".to_string(),
            Instruction::LddAMemHL => "ldd A, (HL)".to_string(),
            Instruction::LdR16D16(r) => format!("ld {}, nn", r),
            Instruction::LdMemD16SP => "ld (nn), SP".to_string(),
            Instruction::LdSPHL => "ld SP, HL".to_string(),
            Instruction::LdHLSPD8 => "ld HL, SP+dd".to_string(),
            Instruction::PushR16(r) => format!("push {}", r),
            Instruction::PopR16(r) => format!("pop {}", r),
            Instruction::AddR8(r) => format!("add A, {}", r),
            Instruction::AddD8 => "add A, n".to_string(),
            Instruction::AddMemHL => "add A, (HL)".to_string(),
            Instruction::AddHLR16(r) => format!("add HL, {}", r),
            Instruction::AddSPD8 => "add SP, dd".to_string(),
            Instruction::AdcR8(r) => format!("adc A, {}", r),
            Instruction::AdcD8 => "adc A, n".to_string(),
            Instruction::AdcMemHL => "adc A, (HL)".to_string(),
            Instruction::SubR8(r) => format!("sub {}", r),
            Instruction::SubD8 => "sub n".to_string(),
            Instruction::SubMemHL => "sub (HL)".to_string(),
            Instruction::SbcR8(r) => format!("sbc A, {}", r),
            Instruction::SbcD8 => "sbc A, n".to_string(),
            Instruction::SbcMemHL => "sbc A, (HL)".to_string(),
            Instruction::AndR8(r) => format!("and {}", r),
            Instruction::AndD8 => "and n".to_string(),
            Instruction::AndMemHL => "and (HL)".to_string(),
            Instruction::XorR8(r) => format!("xor {}", r),
            Instruction::XorD8 => "xor n".to_string(),
            Instruction::XorMemHL => "xor (HL)".to_string(),
            Instruction::OrR8(r) => format!("or {}", r),
            Instruction::OrD8 => "or n".to_string(),
            Instruction::OrMemHL => "or (HL)".to_string(),
            Instruction::CpR8(r) => format!("cp {}", r),
            Instruction::CpD8 => "cp n".to_string(),
            Instruction::CpMemHL => "cp (HL)".to_string(),
            Instruction::IncR8(r) => format!("inc {}", r),
            Instruction::IncMemHL => "inc (HL)".to_string(),
            Instruction::IncR16(r) => format!("inc {}", r),
            Instruction::DecR8(r) => format!("dec {}", r),
            Instruction::DecMemHL => "dec (HL)".to_string(),
            Instruction::DecR16(r) => format!("dec {}", r),
            Instruction::Daa => "daa".to_string(),
            Instruction::Cpl => "cpl".to_string(),
            Instruction::Rlca => "rlca".to_string(),
            Instruction::Rla => "rla".to_string(),
            Instruction::Rrca => "rrca".to_string(),
            Instruction::Rra => "rra".to_string(),
            Instruction::Ccf => "ccf".to_string(),
            Instruction::Scf => "scf".to_string(),
            Instruction::Nop => "nop".to_string(),
            Instruction::Halt => "halt".to_string(),
            Instruction::Stop => "stop".to_string(),
            Instruction::Di => "di".to_string(),
            Instruction::Ei => "ei".to_string(),
            Instruction::JpD16 => "jp nn".to_string(),
            Instruction::JpHL => "jp HL".to_string(),
            Instruction::JpD16Cond(c) => format!("jp {}, nn", c),
            Instruction::JrD8 => "jr dd".to_string(),
            Instruction::JrD8Cond(c) => format!("jr {}, dd", c),
            Instruction::CallD16 => "call nn".to_string(),
            Instruction::CallD16Cond(c) => format!("call {}, nn", c),
            Instruction::Ret => "ret".to_string(),
            Instruction::RetCond(c) => format!("ret {}", c),
            Instruction::Reti => "reti".to_string(),
            Instruction::Rst(addr) => format!("rst {:04X}", addr),
            Instruction::Undefined(opcode) => format!("undefined {:02X}", opcode),
            Instruction::PrefixCB => "prefix cb".to_string(),
        };

        write!(f, "{:15}", s)
    }
}

pub static INSTRUCTIONS: [Instruction; 0x100] = [
    Instruction::Nop,
    Instruction::LdR16D16(Reg::BC),
    Instruction::LdMemR16R8(Reg::BC, Reg::A),
    Instruction::IncR16(Reg::BC),
    Instruction::IncR8(Reg::B),
    Instruction::DecR8(Reg::B),
    Instruction::LdR8D8(Reg::B),
    Instruction::Rlca,
    Instruction::LdMemD16SP,
    Instruction::AddHLR16(Reg::BC),
    Instruction::LdR8MemR16(Reg::A, Reg::BC),
    Instruction::DecR16(Reg::BC),
    Instruction::IncR8(Reg::C),
    Instruction::DecR8(Reg::C),
    Instruction::LdR8D8(Reg::C),
    Instruction::Rrca,
    Instruction::Stop,
    Instruction::LdR16D16(Reg::DE),
    Instruction::LdMemR16R8(Reg::DE, Reg::A),
    Instruction::IncR16(Reg::DE),
    Instruction::IncR8(Reg::D),
    Instruction::DecR8(Reg::D),
    Instruction::LdR8D8(Reg::D),
    Instruction::Rla,
    Instruction::JrD8,
    Instruction::AddHLR16(Reg::DE),
    Instruction::LdR8MemR16(Reg::A, Reg::DE),
    Instruction::DecR16(Reg::DE),
    Instruction::IncR8(Reg::E),
    Instruction::DecR8(Reg::E),
    Instruction::LdR8D8(Reg::E),
    Instruction::Rra,
    Instruction::JrD8Cond(Cond::NZ),
    Instruction::LdR16D16(Reg::HL),
    Instruction::LdiMemHLA,
    Instruction::IncR16(Reg::HL),
    Instruction::IncR8(Reg::H),
    Instruction::DecR8(Reg::H),
    Instruction::LdR8D8(Reg::H),
    Instruction::Daa,
    Instruction::JrD8Cond(Cond::Z),
    Instruction::AddHLR16(Reg::HL),
    Instruction::LdiAMemHL,
    Instruction::DecR16(Reg::HL),
    Instruction::IncR8(Reg::L),
    Instruction::DecR8(Reg::L),
    Instruction::LdR8D8(Reg::L),
    Instruction::Cpl,
    Instruction::JrD8Cond(Cond::NC),
    Instruction::LdR16D16(Reg::SP),
    Instruction::LddMemHLA,
    Instruction::IncR16(Reg::SP),
    Instruction::IncMemHL,
    Instruction::DecMemHL,
    Instruction::LdMemHLD8,
    Instruction::Scf,
    Instruction::JrD8Cond(Cond::C),
    Instruction::AddHLR16(Reg::SP),
    Instruction::LddAMemHL,
    Instruction::DecR16(Reg::SP),
    Instruction::IncR8(Reg::A),
    Instruction::DecR8(Reg::A),
    Instruction::LdR8D8(Reg::A),
    Instruction::Ccf,
    Instruction::LdR8R8(Reg::B, Reg::B),
    Instruction::LdR8R8(Reg::B, Reg::C),
    Instruction::LdR8R8(Reg::B, Reg::D),
    Instruction::LdR8R8(Reg::B, Reg::E),
    Instruction::LdR8R8(Reg::B, Reg::H),
    Instruction::LdR8R8(Reg::B, Reg::L),
    Instruction::LdR8MemR16(Reg::B, Reg::HL),
    Instruction::LdR8R8(Reg::B, Reg::A),
    Instruction::LdR8R8(Reg::C, Reg::B),
    Instruction::LdR8R8(Reg::C, Reg::C),
    Instruction::LdR8R8(Reg::C, Reg::D),
    Instruction::LdR8R8(Reg::C, Reg::E),
    Instruction::LdR8R8(Reg::C, Reg::H),
    Instruction::LdR8R8(Reg::C, Reg::L),
    Instruction::LdR8MemR16(Reg::C, Reg::HL),
    Instruction::LdR8R8(Reg::C, Reg::A),
    Instruction::LdR8R8(Reg::D, Reg::B),
    Instruction::LdR8R8(Reg::D, Reg::C),
    Instruction::LdR8R8(Reg::D, Reg::D),
    Instruction::LdR8R8(Reg::D, Reg::E),
    Instruction::LdR8R8(Reg::D, Reg::H),
    Instruction::LdR8R8(Reg::D, Reg::L),
    Instruction::LdR8MemR16(Reg::D, Reg::HL),
    Instruction::LdR8R8(Reg::D, Reg::A),
    Instruction::LdR8R8(Reg::E, Reg::B),
    Instruction::LdR8R8(Reg::E, Reg::C),
    Instruction::LdR8R8(Reg::E, Reg::D),
    Instruction::LdR8R8(Reg::E, Reg::E),
    Instruction::LdR8R8(Reg::E, Reg::H),
    Instruction::LdR8R8(Reg::E, Reg::L),
    Instruction::LdR8MemR16(Reg::E, Reg::HL),
    Instruction::LdR8R8(Reg::E, Reg::A),
    Instruction::LdR8R8(Reg::H, Reg::B),
    Instruction::LdR8R8(Reg::H, Reg::C),
    Instruction::LdR8R8(Reg::H, Reg::D),
    Instruction::LdR8R8(Reg::H, Reg::E),
    Instruction::LdR8R8(Reg::H, Reg::H),
    Instruction::LdR8R8(Reg::H, Reg::L),
    Instruction::LdR8MemR16(Reg::H, Reg::HL),
    Instruction::LdR8R8(Reg::H, Reg::A),
    Instruction::LdR8R8(Reg::L, Reg::B),
    Instruction::LdR8R8(Reg::L, Reg::C),
    Instruction::LdR8R8(Reg::L, Reg::D),
    Instruction::LdR8R8(Reg::L, Reg::E),
    Instruction::LdR8R8(Reg::L, Reg::H),
    Instruction::LdR8R8(Reg::L, Reg::L),
    Instruction::LdR8MemR16(Reg::L, Reg::HL),
    Instruction::LdR8R8(Reg::L, Reg::A),
    Instruction::LdMemR16R8(Reg::HL, Reg::B),
    Instruction::LdMemR16R8(Reg::HL, Reg::C),
    Instruction::LdMemR16R8(Reg::HL, Reg::D),
    Instruction::LdMemR16R8(Reg::HL, Reg::E),
    Instruction::LdMemR16R8(Reg::HL, Reg::H),
    Instruction::LdMemR16R8(Reg::HL, Reg::L),
    Instruction::Halt,
    Instruction::LdMemR16R8(Reg::HL, Reg::A),
    Instruction::LdR8R8(Reg::A, Reg::B),
    Instruction::LdR8R8(Reg::A, Reg::C),
    Instruction::LdR8R8(Reg::A, Reg::D),
    Instruction::LdR8R8(Reg::A, Reg::E),
    Instruction::LdR8R8(Reg::A, Reg::H),
    Instruction::LdR8R8(Reg::A, Reg::L),
    Instruction::LdR8MemR16(Reg::A, Reg::HL),
    Instruction::LdR8R8(Reg::A, Reg::A),
    Instruction::AddR8(Reg::B),
    Instruction::AddR8(Reg::C),
    Instruction::AddR8(Reg::D),
    Instruction::AddR8(Reg::E),
    Instruction::AddR8(Reg::H),
    Instruction::AddR8(Reg::L),
    Instruction::AddMemHL,
    Instruction::AddR8(Reg::A),
    Instruction::AdcR8(Reg::B),
    Instruction::AdcR8(Reg::C),
    Instruction::AdcR8(Reg::D),
    Instruction::AdcR8(Reg::E),
    Instruction::AdcR8(Reg::H),
    Instruction::AdcR8(Reg::L),
    Instruction::AdcMemHL,
    Instruction::AdcR8(Reg::A),
    Instruction::SubR8(Reg::B),
    Instruction::SubR8(Reg::C),
    Instruction::SubR8(Reg::D),
    Instruction::SubR8(Reg::E),
    Instruction::SubR8(Reg::H),
    Instruction::SubR8(Reg::L),
    Instruction::SubMemHL,
    Instruction::SubR8(Reg::A),
    Instruction::SbcR8(Reg::B),
    Instruction::SbcR8(Reg::C),
    Instruction::SbcR8(Reg::D),
    Instruction::SbcR8(Reg::E),
    Instruction::SbcR8(Reg::H),
    Instruction::SbcR8(Reg::L),
    Instruction::SbcMemHL,
    Instruction::SbcR8(Reg::A),
    Instruction::AndR8(Reg::B),
    Instruction::AndR8(Reg::C),
    Instruction::AndR8(Reg::D),
    Instruction::AndR8(Reg::E),
    Instruction::AndR8(Reg::H),
    Instruction::AndR8(Reg::L),
    Instruction::AndMemHL,
    Instruction::AndR8(Reg::A),
    Instruction::XorR8(Reg::B),
    Instruction::XorR8(Reg::C),
    Instruction::XorR8(Reg::D),
    Instruction::XorR8(Reg::E),
    Instruction::XorR8(Reg::H),
    Instruction::XorR8(Reg::L),
    Instruction::XorMemHL,
    Instruction::XorR8(Reg::A),
    Instruction::OrR8(Reg::B),
    Instruction::OrR8(Reg::C),
    Instruction::OrR8(Reg::D),
    Instruction::OrR8(Reg::E),
    Instruction::OrR8(Reg::H),
    Instruction::OrR8(Reg::L),
    Instruction::OrMemHL,
    Instruction::OrR8(Reg::A),
    Instruction::CpR8(Reg::B),
    Instruction::CpR8(Reg::C),
    Instruction::CpR8(Reg::D),
    Instruction::CpR8(Reg::E),
    Instruction::CpR8(Reg::H),
    Instruction::CpR8(Reg::L),
    Instruction::CpMemHL,
    Instruction::CpR8(Reg::A),
    Instruction::RetCond(Cond::NZ),
    Instruction::PopR16(Reg::BC),
    Instruction::JpD16Cond(Cond::NZ),
    Instruction::JpD16,
    Instruction::CallD16Cond(Cond::NZ),
    Instruction::PushR16(Reg::BC),
    Instruction::AddD8,
    Instruction::Rst(0x00),
    Instruction::RetCond(Cond::Z),
    Instruction::Ret,
    Instruction::JpD16Cond(Cond::Z),
    Instruction::PrefixCB,
    Instruction::CallD16Cond(Cond::Z),
    Instruction::CallD16,
    Instruction::AdcD8,
    Instruction::Rst(0x08),
    Instruction::RetCond(Cond::NC),
    Instruction::PopR16(Reg::DE),
    Instruction::JpD16Cond(Cond::NC),
    Instruction::Undefined(0xD3),
    Instruction::CallD16Cond(Cond::NC),
    Instruction::PushR16(Reg::DE),
    Instruction::SubD8,
    Instruction::Rst(0x10),
    Instruction::RetCond(Cond::C),
    Instruction::Reti,
    Instruction::JpD16Cond(Cond::C),
    Instruction::Undefined(0xDB),
    Instruction::CallD16Cond(Cond::C),
    Instruction::Undefined(0xDD),
    Instruction::SbcD8,
    Instruction::Rst(0x18),
    Instruction::LdMemD8A,
    Instruction::PopR16(Reg::HL),
    Instruction::LdMemCA,
    Instruction::Undefined(0xE3),
    Instruction::Undefined(0xE4),
    Instruction::PushR16(Reg::HL),
    Instruction::AndD8,
    Instruction::Rst(0x20),
    Instruction::AddSPD8,
    Instruction::JpHL,
    Instruction::LdMemD16A,
    Instruction::Undefined(0xEB),
    Instruction::Undefined(0xEC),
    Instruction::Undefined(0xED),
    Instruction::XorD8,
    Instruction::Rst(0x28),
    Instruction::LdAMemD8,
    Instruction::PopR16(Reg::AF),
    Instruction::LdAMemC,
    Instruction::Di,
    Instruction::Undefined(0xF4),
    Instruction::PushR16(Reg::AF),
    Instruction::OrD8,
    Instruction::Rst(0x30),
    Instruction::LdHLSPD8,
    Instruction::LdSPHL,
    Instruction::LdAMemD16,
    Instruction::Ei,
    Instruction::Undefined(0xFC),
    Instruction::Undefined(0xFD),
    Instruction::CpD8,
    Instruction::Rst(0x38),
];

pub enum InstructionCB {
    Rlc(Reg),
    Rl(Reg),
    Rrc(Reg),
    Rr(Reg),
    Sla(Reg),
    Swap(Reg),
    Sra(Reg),
    Srl(Reg),
    Bit(Reg, u8),
    Set(Reg, u8),
    Res(Reg, u8),
}

impl Display for InstructionCB {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        let s = match *self {
            InstructionCB::Rlc(r) => format!("rlc {}", r.get_cb_register_name()),
            InstructionCB::Rl(r) => format!("rl {}", r.get_cb_register_name()),
            InstructionCB::Rrc(r) => format!("rrc {}", r.get_cb_register_name()),
            InstructionCB::Rr(r) => format!("rr {}", r.get_cb_register_name()),
            InstructionCB::Sla(r) => format!("sla {}", r.get_cb_register_name()),
            InstructionCB::Swap(r) => format!("swap {}", r.get_cb_register_name()),
            InstructionCB::Sra(r) => format!("sra {}", r.get_cb_register_name()),
            InstructionCB::Srl(r) => format!("srl {}", r.get_cb_register_name()),
            InstructionCB::Bit(r, b) => format!("bit {}, {}", b, r.get_cb_register_name()),
            InstructionCB::Set(r, b) => format!("set {}, {}", b, r.get_cb_register_name()),
            InstructionCB::Res(r, b) => format!("res {}, {}", b, r.get_cb_register_name()),
        };

        write!(f, "{s:15}")
    }
}

pub static INSTRUCTIONS_CB: [InstructionCB; 0x100] = [
    InstructionCB::Rlc(Reg::B),
    InstructionCB::Rlc(Reg::C),
    InstructionCB::Rlc(Reg::D),
    InstructionCB::Rlc(Reg::E),
    InstructionCB::Rlc(Reg::H),
    InstructionCB::Rlc(Reg::L),
    InstructionCB::Rlc(Reg::HL),
    InstructionCB::Rlc(Reg::A),
    InstructionCB::Rrc(Reg::B),
    InstructionCB::Rrc(Reg::C),
    InstructionCB::Rrc(Reg::D),
    InstructionCB::Rrc(Reg::E),
    InstructionCB::Rrc(Reg::H),
    InstructionCB::Rrc(Reg::L),
    InstructionCB::Rrc(Reg::HL),
    InstructionCB::Rrc(Reg::A),
    InstructionCB::Rl(Reg::B),
    InstructionCB::Rl(Reg::C),
    InstructionCB::Rl(Reg::D),
    InstructionCB::Rl(Reg::E),
    InstructionCB::Rl(Reg::H),
    InstructionCB::Rl(Reg::L),
    InstructionCB::Rl(Reg::HL),
    InstructionCB::Rl(Reg::A),
    InstructionCB::Rr(Reg::B),
    InstructionCB::Rr(Reg::C),
    InstructionCB::Rr(Reg::D),
    InstructionCB::Rr(Reg::E),
    InstructionCB::Rr(Reg::H),
    InstructionCB::Rr(Reg::L),
    InstructionCB::Rr(Reg::HL),
    InstructionCB::Rr(Reg::A),
    InstructionCB::Sla(Reg::B),
    InstructionCB::Sla(Reg::C),
    InstructionCB::Sla(Reg::D),
    InstructionCB::Sla(Reg::E),
    InstructionCB::Sla(Reg::H),
    InstructionCB::Sla(Reg::L),
    InstructionCB::Sla(Reg::HL),
    InstructionCB::Sla(Reg::A),
    InstructionCB::Sra(Reg::B),
    InstructionCB::Sra(Reg::C),
    InstructionCB::Sra(Reg::D),
    InstructionCB::Sra(Reg::E),
    InstructionCB::Sra(Reg::H),
    InstructionCB::Sra(Reg::L),
    InstructionCB::Sra(Reg::HL),
    InstructionCB::Sra(Reg::A),
    InstructionCB::Swap(Reg::B),
    InstructionCB::Swap(Reg::C),
    InstructionCB::Swap(Reg::D),
    InstructionCB::Swap(Reg::E),
    InstructionCB::Swap(Reg::H),
    InstructionCB::Swap(Reg::L),
    InstructionCB::Swap(Reg::HL),
    InstructionCB::Swap(Reg::A),
    InstructionCB::Srl(Reg::B),
    InstructionCB::Srl(Reg::C),
    InstructionCB::Srl(Reg::D),
    InstructionCB::Srl(Reg::E),
    InstructionCB::Srl(Reg::H),
    InstructionCB::Srl(Reg::L),
    InstructionCB::Srl(Reg::HL),
    InstructionCB::Srl(Reg::A),
    InstructionCB::Bit(Reg::B, 0),
    InstructionCB::Bit(Reg::C, 0),
    InstructionCB::Bit(Reg::D, 0),
    InstructionCB::Bit(Reg::E, 0),
    InstructionCB::Bit(Reg::H, 0),
    InstructionCB::Bit(Reg::L, 0),
    InstructionCB::Bit(Reg::HL, 0),
    InstructionCB::Bit(Reg::A, 0),
    InstructionCB::Bit(Reg::B, 1),
    InstructionCB::Bit(Reg::C, 1),
    InstructionCB::Bit(Reg::D, 1),
    InstructionCB::Bit(Reg::E, 1),
    InstructionCB::Bit(Reg::H, 1),
    InstructionCB::Bit(Reg::L, 1),
    InstructionCB::Bit(Reg::HL, 1),
    InstructionCB::Bit(Reg::A, 1),
    InstructionCB::Bit(Reg::B, 2),
    InstructionCB::Bit(Reg::C, 2),
    InstructionCB::Bit(Reg::D, 2),
    InstructionCB::Bit(Reg::E, 2),
    InstructionCB::Bit(Reg::H, 2),
    InstructionCB::Bit(Reg::L, 2),
    InstructionCB::Bit(Reg::HL, 2),
    InstructionCB::Bit(Reg::A, 2),
    InstructionCB::Bit(Reg::B, 3),
    InstructionCB::Bit(Reg::C, 3),
    InstructionCB::Bit(Reg::D, 3),
    InstructionCB::Bit(Reg::E, 3),
    InstructionCB::Bit(Reg::H, 3),
    InstructionCB::Bit(Reg::L, 3),
    InstructionCB::Bit(Reg::HL, 3),
    InstructionCB::Bit(Reg::A, 3),
    InstructionCB::Bit(Reg::B, 4),
    InstructionCB::Bit(Reg::C, 4),
    InstructionCB::Bit(Reg::D, 4),
    InstructionCB::Bit(Reg::E, 4),
    InstructionCB::Bit(Reg::H, 4),
    InstructionCB::Bit(Reg::L, 4),
    InstructionCB::Bit(Reg::HL, 4),
    InstructionCB::Bit(Reg::A, 4),
    InstructionCB::Bit(Reg::B, 5),
    InstructionCB::Bit(Reg::C, 5),
    InstructionCB::Bit(Reg::D, 5),
    InstructionCB::Bit(Reg::E, 5),
    InstructionCB::Bit(Reg::H, 5),
    InstructionCB::Bit(Reg::L, 5),
    InstructionCB::Bit(Reg::HL, 5),
    InstructionCB::Bit(Reg::A, 5),
    InstructionCB::Bit(Reg::B, 6),
    InstructionCB::Bit(Reg::C, 6),
    InstructionCB::Bit(Reg::D, 6),
    InstructionCB::Bit(Reg::E, 6),
    InstructionCB::Bit(Reg::H, 6),
    InstructionCB::Bit(Reg::L, 6),
    InstructionCB::Bit(Reg::HL, 6),
    InstructionCB::Bit(Reg::A, 6),
    InstructionCB::Bit(Reg::B, 7),
    InstructionCB::Bit(Reg::C, 7),
    InstructionCB::Bit(Reg::D, 7),
    InstructionCB::Bit(Reg::E, 7),
    InstructionCB::Bit(Reg::H, 7),
    InstructionCB::Bit(Reg::L, 7),
    InstructionCB::Bit(Reg::HL, 7),
    InstructionCB::Bit(Reg::A, 7),
    InstructionCB::Res(Reg::B, 0),
    InstructionCB::Res(Reg::C, 0),
    InstructionCB::Res(Reg::D, 0),
    InstructionCB::Res(Reg::E, 0),
    InstructionCB::Res(Reg::H, 0),
    InstructionCB::Res(Reg::L, 0),
    InstructionCB::Res(Reg::HL, 0),
    InstructionCB::Res(Reg::A, 0),
    InstructionCB::Res(Reg::B, 1),
    InstructionCB::Res(Reg::C, 1),
    InstructionCB::Res(Reg::D, 1),
    InstructionCB::Res(Reg::E, 1),
    InstructionCB::Res(Reg::H, 1),
    InstructionCB::Res(Reg::L, 1),
    InstructionCB::Res(Reg::HL, 1),
    InstructionCB::Res(Reg::A, 1),
    InstructionCB::Res(Reg::B, 2),
    InstructionCB::Res(Reg::C, 2),
    InstructionCB::Res(Reg::D, 2),
    InstructionCB::Res(Reg::E, 2),
    InstructionCB::Res(Reg::H, 2),
    InstructionCB::Res(Reg::L, 2),
    InstructionCB::Res(Reg::HL, 2),
    InstructionCB::Res(Reg::A, 2),
    InstructionCB::Res(Reg::B, 3),
    InstructionCB::Res(Reg::C, 3),
    InstructionCB::Res(Reg::D, 3),
    InstructionCB::Res(Reg::E, 3),
    InstructionCB::Res(Reg::H, 3),
    InstructionCB::Res(Reg::L, 3),
    InstructionCB::Res(Reg::HL, 3),
    InstructionCB::Res(Reg::A, 3),
    InstructionCB::Res(Reg::B, 4),
    InstructionCB::Res(Reg::C, 4),
    InstructionCB::Res(Reg::D, 4),
    InstructionCB::Res(Reg::E, 4),
    InstructionCB::Res(Reg::H, 4),
    InstructionCB::Res(Reg::L, 4),
    InstructionCB::Res(Reg::HL, 4),
    InstructionCB::Res(Reg::A, 4),
    InstructionCB::Res(Reg::B, 5),
    InstructionCB::Res(Reg::C, 5),
    InstructionCB::Res(Reg::D, 5),
    InstructionCB::Res(Reg::E, 5),
    InstructionCB::Res(Reg::H, 5),
    InstructionCB::Res(Reg::L, 5),
    InstructionCB::Res(Reg::HL, 5),
    InstructionCB::Res(Reg::A, 5),
    InstructionCB::Res(Reg::B, 6),
    InstructionCB::Res(Reg::C, 6),
    InstructionCB::Res(Reg::D, 6),
    InstructionCB::Res(Reg::E, 6),
    InstructionCB::Res(Reg::H, 6),
    InstructionCB::Res(Reg::L, 6),
    InstructionCB::Res(Reg::HL, 6),
    InstructionCB::Res(Reg::A, 6),
    InstructionCB::Res(Reg::B, 7),
    InstructionCB::Res(Reg::C, 7),
    InstructionCB::Res(Reg::D, 7),
    InstructionCB::Res(Reg::E, 7),
    InstructionCB::Res(Reg::H, 7),
    InstructionCB::Res(Reg::L, 7),
    InstructionCB::Res(Reg::HL, 7),
    InstructionCB::Res(Reg::A, 7),
    InstructionCB::Set(Reg::B, 0),
    InstructionCB::Set(Reg::C, 0),
    InstructionCB::Set(Reg::D, 0),
    InstructionCB::Set(Reg::E, 0),
    InstructionCB::Set(Reg::H, 0),
    InstructionCB::Set(Reg::L, 0),
    InstructionCB::Set(Reg::HL, 0),
    InstructionCB::Set(Reg::A, 0),
    InstructionCB::Set(Reg::B, 1),
    InstructionCB::Set(Reg::C, 1),
    InstructionCB::Set(Reg::D, 1),
    InstructionCB::Set(Reg::E, 1),
    InstructionCB::Set(Reg::H, 1),
    InstructionCB::Set(Reg::L, 1),
    InstructionCB::Set(Reg::HL, 1),
    InstructionCB::Set(Reg::A, 1),
    InstructionCB::Set(Reg::B, 2),
    InstructionCB::Set(Reg::C, 2),
    InstructionCB::Set(Reg::D, 2),
    InstructionCB::Set(Reg::E, 2),
    InstructionCB::Set(Reg::H, 2),
    InstructionCB::Set(Reg::L, 2),
    InstructionCB::Set(Reg::HL, 2),
    InstructionCB::Set(Reg::A, 2),
    InstructionCB::Set(Reg::B, 3),
    InstructionCB::Set(Reg::C, 3),
    InstructionCB::Set(Reg::D, 3),
    InstructionCB::Set(Reg::E, 3),
    InstructionCB::Set(Reg::H, 3),
    InstructionCB::Set(Reg::L, 3),
    InstructionCB::Set(Reg::HL, 3),
    InstructionCB::Set(Reg::A, 3),
    InstructionCB::Set(Reg::B, 4),
    InstructionCB::Set(Reg::C, 4),
    InstructionCB::Set(Reg::D, 4),
    InstructionCB::Set(Reg::E, 4),
    InstructionCB::Set(Reg::H, 4),
    InstructionCB::Set(Reg::L, 4),
    InstructionCB::Set(Reg::HL, 4),
    InstructionCB::Set(Reg::A, 4),
    InstructionCB::Set(Reg::B, 5),
    InstructionCB::Set(Reg::C, 5),
    InstructionCB::Set(Reg::D, 5),
    InstructionCB::Set(Reg::E, 5),
    InstructionCB::Set(Reg::H, 5),
    InstructionCB::Set(Reg::L, 5),
    InstructionCB::Set(Reg::HL, 5),
    InstructionCB::Set(Reg::A, 5),
    InstructionCB::Set(Reg::B, 6),
    InstructionCB::Set(Reg::C, 6),
    InstructionCB::Set(Reg::D, 6),
    InstructionCB::Set(Reg::E, 6),
    InstructionCB::Set(Reg::H, 6),
    InstructionCB::Set(Reg::L, 6),
    InstructionCB::Set(Reg::HL, 6),
    InstructionCB::Set(Reg::A, 6),
    InstructionCB::Set(Reg::B, 7),
    InstructionCB::Set(Reg::C, 7),
    InstructionCB::Set(Reg::D, 7),
    InstructionCB::Set(Reg::E, 7),
    InstructionCB::Set(Reg::H, 7),
    InstructionCB::Set(Reg::L, 7),
    InstructionCB::Set(Reg::HL, 7),
    InstructionCB::Set(Reg::A, 7),
];
